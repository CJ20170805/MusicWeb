@page "/"
@inject INotificationService NotificationService
@inject IUserService UserService

<PageTitle>Home</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Notification Test</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="3">
                        <MudText>To all admins</MudText>
                    </MudItem>
                    <MudItem xs="9">

                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleSendToAdmins">Send Msg
                        </MudButton>
                    </MudItem>
                </MudGrid>

                <MudGrid Class="pt-2">
                    <MudItem xs="3">
                        <MudText>To all users</MudText>
                    </MudItem>
                    <MudItem xs="9">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleSendToUsers">Send Msg
                        </MudButton>
                    </MudItem>
                </MudGrid>

                <MudGrid Class="pt-2">
                    <MudItem xs="3">
                        <MudText>To specific user</MudText>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))"
                            MultiSelection="true" SelectedValues="SelectedUsers"
                            SelectedValuesChanged="OnSelectedValuesChanged" T="string"
                            AdornmentIcon="@Icons.Material.Filled.Search" AnchorOrigin="Origin.BottomCenter">

                            @foreach (var user in users)
                            {
                                <MudSelectItem T="string" Value="@user.Id.ToString()">@user.UserName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="2">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleSendToAUser">Send Msg
                        </MudButton>
                    </MudItem>
                </MudGrid>

                <MudGrid Class="pt-2">
                    <MudItem xs="3">
                        <MudText>Test</MudText>
                    </MudItem>
                    <MudItem xs="9">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleSendMessage">Send Msg
                        </MudButton>
                    </MudItem>
                </MudGrid>

            </MudCardContent>
            <MudCardActions>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code
{
    private IEnumerable<UserDTO> users = new List<UserDTO>();
    private IEnumerable<Guid> selectedUserIds = new List<Guid>();
    private List<string> SelectedUsers { get; set; } = new List<string>();

     protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        users = await UserService.GetUsersAllAsync();
    }
    private string GetMultiSelectionText(List<string> selectedValues)
    {
        var selectedSet = new HashSet<string>(selectedValues);

        selectedUserIds = selectedValues.Select(s => Guid.Parse(s)).ToList();

        var nameList = users
            .Where(user => selectedSet.Contains(user.Id.ToString()))
            .Select(u => u.UserName)
            .ToList();       

        return string.Join(", ", nameList);
    }
    private void OnSelectedValuesChanged(IEnumerable<string> selectedValues)
    {
        SelectedUsers = selectedValues.ToList();
    }
    private async void HandleSendMessage()
    {
        Console.WriteLine("Triggered!!!!");
        try
        {
            await NotificationService.TestNotification();
        }
        catch (Exception err)
        {
            Console.WriteLine("xeexxxx:" + err);
        }
    }
    private async void HandleSendToAdmins()
    {
        Console.WriteLine("Triggered!!!!");
        try
        {
            await NotificationService.TestSendToAllAdmins();
        }
        catch (Exception err)
        {
            Console.WriteLine("xeexxxx:" + err);
        }
    }
    private async void HandleSendToUsers()
    {
        Console.WriteLine("Triggered!!!!");
        try
        {
            await NotificationService.TestSendToAllUsers();
        }
        catch (Exception err)
        {
            Console.WriteLine("xeexxxx:" + err);
        }
    }

    private async void HandleSendToAUser()
    {
        Console.WriteLine("Triggered!!!!");
        try
        {
            await NotificationService.TestSendToAUser(selectedUserIds);
        }
        catch (Exception err)
        {
            Console.WriteLine("xeexxxx:" + err);
        }
    }
}
