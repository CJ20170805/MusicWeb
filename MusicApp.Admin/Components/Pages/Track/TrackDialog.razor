@inject ITrackService TrackService
@inject IFileUploadService FileUploadService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            @if (isDeleting)
            {
                <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3 mb-n1"/> @("Delete Track")
            }
            else if (isEditing)
            {
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1"/> @("Edit Track")
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1"/> @("Add New Track")
            }
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (!isDeleting)
        {
            <MudTextField @bind-Value="@Track.Title" Label="Title" ReadOnly="false"/>
            <MudTextField @bind-Value="@Track.Artist" Label="Artist" ReadOnly="false"/>
            <MudTextField @bind-Value="@formattedDuration" Label="Duration" ReadOnly="false"/>
            @if(Track.CoverImage != null)
            {
                <MudImage Src="@Track.CoverImage.FilePath" Width="332" Height="250" Alt="Swedish Farm House" Elevation="25" Class="rounded-lg ma-4"/>
                <MudTextField @bind-Value="@Track.CoverImage.FileName" Label="CoverImageId" ReadOnly="false"/>
            }
         
         <MudFileUpload T="IBrowserFile" OnFilesChanged="UploadFiles">
    <ActivatorContent>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary">
            Cover Image File
        </MudButton>
    </ActivatorContent>
    <SelectedTemplate>
        @if (file != null)
        {
            <MudText>@file.Name</MudText>
        }
        else
        {
            <MudText>No File</MudText>
        }
    </SelectedTemplate>
</MudFileUpload>
        }
        else
        {
            <MudText>Are you sure you want to delete the track "<strong>@Track.Title</strong>"?</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        
        @if (isDeleting)
        {
            <MudButton Color="Color.Error" OnClick="DeleteTrack">Delete</MudButton>
        }
        else
        {
            if (isEditing)
            {
                <MudButton Color="Color.Primary" OnClick="Save">@("Save")</MudButton>
            }
            else
            {
                <MudButton Color="Color.Primary" OnClick="Save">@("Create")</MudButton>
            }
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public TrackDTO Track { get; set; } = new TrackDTO();

    [Parameter]
    public bool isEditing { get; set; }

    [Parameter]
    public bool isDeleting { get; set; } 
    private IBrowserFile? file;

    private void UploadFiles(InputFileChangeEventArgs args)
    {
        file = args.File;
    }
    private void Cancel() => MudDialog?.Cancel();
    private async Task Save()
    {
        if(file != null)
        {
                //TODO upload the files to the server
                var fileStream = file.OpenReadStream();
                string timeStamp = DateTime.UtcNow.ToString("yyyyMMddHHmmss");
                string fileName = $"{Path.GetFileNameWithoutExtension(file.Name)}_{timeStamp}{Path.GetExtension(file.Name)}";

                Guid fileId = await FileUploadService.UploadFileAsync(fileStream, fileName, FileType.Cover);
                Track.CoverImageId = fileId;
                Console.WriteLine("FileIDDDDDD:" + fileId);
        }
        if (isEditing)
        {
            await TrackService.UpdateTrackAsync(Track); // Update 
        }
        else
        {
            await TrackService.CreateTrackAsync(Track); // Create 
        }
        MudDialog?.Close(DialogResult.Ok(Track.Id)); // Close dialog
    }

    // Delete track
    private async Task DeleteTrack()
    {
        await TrackService.DeleteTrackAsync(Track.Id); 
        MudDialog?.Close(DialogResult.Ok(Track.Id)); 
    }
    private string formattedDuration
    {
        get => Track.Duration.ToString(@"hh\:mm\:ss"); // Convert TimeSpan to "HH:mm:ss"
        set
        {
            // Convert the string back to TimeSpan
            if (TimeSpan.TryParseExact(value, @"hh\:mm\:ss", null, out var parsedDuration))
            {
                Track.Duration = parsedDuration;
            }
        }
    }
}
