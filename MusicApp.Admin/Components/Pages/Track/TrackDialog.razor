@inject ITrackService TrackService

<div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@((isEditing ? "Edit Track" : "Add New Track"))</h5>
                <button type="button" class="close" @onclick="() => OnDialogClosed.InvokeAsync()">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label>Title:</label>
                        <input type="text" class="form-control" @bind="currentTrack.Title" required />
                    </div>
                    <div class="form-group">
                        <label>Artist:</label>
                        <input type="text" class="form-control" @bind="currentTrack.Artist" required />
                    </div>
                    <div class="form-group">
                        <label>Duration (HH:mm:ss):</label>
                        <input type="text" class="form-control" @bind="formattedDuration" placeholder="HH:mm:ss" required />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="() => OnDialogClosed.InvokeAsync()">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveTrack">Save</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnTrackSaved { get; set; }
    [Parameter] public EventCallback OnDialogClosed { get; set; }
    [Parameter] public TrackDTO? Track { get; set; } // Track for editing

    private TrackDTO currentTrack = new TrackDTO(); // Current track being edited/created
    private bool isEditing = false;

    protected override void OnParametersSet()
    {
        Initialize(Track);
    }

    private string formattedDuration
    {
        get => currentTrack.Duration.ToString(@"hh\:mm\:ss"); // Convert TimeSpan to "HH:mm:ss"
        set
        {
            // Convert the string back to TimeSpan
            if (TimeSpan.TryParseExact(value, @"hh\:mm\:ss", null, out var parsedDuration))
            {
                currentTrack.Duration = parsedDuration;
            }
        }
    }

    public void Initialize(TrackDTO? trackToEdit)
    {
        if (trackToEdit != null)
        {
            currentTrack = trackToEdit; // Use the provided track if it's not null
            isEditing = true; // Set editing state
        }
        else
        {
            currentTrack = new TrackDTO(); // Initialize a new TrackDTO if null
            isEditing = false; // Reset editing state
        }
    }

    private async Task SaveTrack()
    {
        if (isEditing)
        {
            await TrackService.UpdateTrackAsync(currentTrack);
        }
        else
        {
            await TrackService.CreateTrackAsync(currentTrack);
        }

        await OnTrackSaved.InvokeAsync();
        await OnDialogClosed.InvokeAsync();
    }
}
