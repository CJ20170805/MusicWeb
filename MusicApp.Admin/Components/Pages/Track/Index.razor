@page "/tracks"
@inject ITrackService TrackService
@inject IDialogService DialogService

<PageTitle>Track</PageTitle>


<MudTable Items="@tracks" Hover="true" SortLabel="Sort By">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Track Management</MudText>
        <MudSpacer />
        <MudButton class="mr-6" OnClick="handleCreate" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col />
        <col style="width:18%;" />
    </ColGroup>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<TrackDTO, object>(x=>x.Title ?? string.Empty)">Title</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                SortBy="new Func<TrackDTO, object>(x=>x.Artist ?? string.Empty)">Artist</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<TrackDTO, object>(x=>x.Duration)">Duration</MudTableSortLabel>
        </MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Artist">@context.Artist</MudTd>
        <MudTd DataLabel="Duration">@context.Duration</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="()=> handleEdit(context)">Edit</MudButton>
            <MudButton class="ml-2" Variant="Variant.Outlined" Size="Size.Small" OnClick="()=>handleDelete(context)" Color="Color.Secondary">Delete
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<TrackDTO> tracks = new List<TrackDTO>();
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        tracks = await TrackService.GetTracksAllAsync();
    }

    private async Task handleCreate()
    {
        var parameters = new DialogParameters
        {
            { nameof(TrackDialog.Track), new TrackDTO() }, 
            { nameof(TrackDialog.isEditing), false } 
        };

        var dialog = await DialogService.ShowAsync<TrackDialog>("Add", parameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
             await LoadData();
        }
    }

    private async Task handleEdit(TrackDTO track)
    {
        var parameters = new DialogParameters
        {
            { nameof(TrackDialog.Track), track },
            { nameof(TrackDialog.isEditing), true }
        };

        var dialog = await DialogService.ShowAsync<TrackDialog>("Edit", parameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
             await LoadData();
        }
    }

    private async Task handleDelete(TrackDTO track)
    {
         var parameters = new DialogParameters
        {
            { nameof(TrackDialog.Track), track },
            { nameof(TrackDialog.isEditing), false }, 
            { nameof(TrackDialog.isDeleting), true } 
        };

        var dialog = await DialogService.ShowAsync<TrackDialog>("Delete", parameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await LoadData();
        }
    }
}
