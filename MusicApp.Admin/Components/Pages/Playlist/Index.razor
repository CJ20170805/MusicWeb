@page "/playlists"
@attribute [Authorize(Policy = "AdminPolicy")]
@inject IDialogService DialogService
@inject IPlaylistService PlaylistService
@inject ITrackService TrackService
@inject IUserService UserService


<PageTitle>Playlist</PageTitle>

<MudTable Items="@playlists" Hover="true" SortLabel="Sort By">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Playlist Management</MudText>
        <MudSpacer />
        <MudButton class="mr-6" OnClick="handleCreate" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col style="width:28%;" />
    </ColGroup>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<PlaylistDTO, object>(x=>x.Title ?? string.Empty)">Title</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                SortBy="new Func<PlaylistDTO, object>(x=>x.User?.UserName ?? string.Empty)">UserName</MudTableSortLabel>
        </MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="User">@context.User?.UserName</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="()=> handleEdit(context)">Edit</MudButton>
            <MudButton class="ml-2" Variant="Variant.Outlined" Size="Size.Small" OnClick="()=>handleDelete(context)" Color="Color.Secondary">Delete
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<PlaylistDTO>? playlists;
    private IEnumerable<UserDTO>? users;
    private IEnumerable<TrackDTO> tracks = new List<TrackDTO>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        playlists = await PlaylistService.GetPlaylistsAllAsync();
        users = await UserService.GetUsersAllAsync();
        tracks = await TrackService.GetTracksAllAsync();
    }

    private async Task handleCreate()
    {
        var parameters = new DialogParameters
        {
            { nameof(PlaylistDialog.Playlist), new PlaylistDTO() }, 
            { nameof(PlaylistDialog.isEditing), false },
            { nameof(PlaylistDialog.Userlist), users},
            { nameof(PlaylistDialog.Tracklist), tracks},
        };

        var dialog = await DialogService.ShowAsync<PlaylistDialog>("Add", parameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
             await LoadData();
        }
    }

    private async Task handleEdit(PlaylistDTO playlist)
    {
        Console.WriteLine("Plssitt-handleEdit", playlist.Title);
        var parameters = new DialogParameters
        {
            { nameof(PlaylistDialog.Playlist), playlist },
            { nameof(PlaylistDialog.isEditing), true },
            { nameof(PlaylistDialog.Userlist), users},
            { nameof(PlaylistDialog.Tracklist), tracks},
        };

        var dialog = await DialogService.ShowAsync<PlaylistDialog>("Edit", parameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
             await LoadData();
        }
    }

    private async Task handleDelete(PlaylistDTO playlist)
    {
         var parameters = new DialogParameters
        {
            { nameof(PlaylistDialog.Playlist), playlist },
            { nameof(PlaylistDialog.isEditing), false }, 
            { nameof(PlaylistDialog.isDeleting), true } 
        };

        var dialog = await DialogService.ShowAsync<PlaylistDialog>("Delete", parameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await LoadData();
        }
    }

}
