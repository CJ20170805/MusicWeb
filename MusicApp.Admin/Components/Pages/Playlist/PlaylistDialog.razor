@inject IPlaylistService PlaylistService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            @if (isDeleting)
            {
                <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3 mb-n1" /> @("Delete Playlist")
            }
            else if (isEditing)
            {
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" /> @("Edit Playlist")
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" /> @("Add New Playlist")
            }
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (!isDeleting)
        {
            <MudTextField @bind-Value="@Playlist.Title" Label="Title" ReadOnly="false" />
            <MudTextField class="mt-4 mb-4" Value="@Playlist.User?.UserName" Label="UserName" ReadOnly="true" />

            @if (Playlist.Tracks != null)
            {
                 <MudText Typo="Typo.inherit">Tracks</MudText>
                <MudSimpleTable Hover="true" Dense="true" FixedHeader="true" Style="height:300px;">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Artist</th>
                            <th>Duration</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var track in Playlist.Tracks)
                        {
                            <tr>
                                <td>@track.Title</td>
                                <td>@track.Artist</td>
                                <td>@track.Duration.ToString(@"hh\:mm\:ss")</td> <!-- Formats TimeSpan -->
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            }
        }
        else
        {
            <MudText>Are you sure you want to delete the track "<strong>@Playlist.Title</strong>"?</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>

        @if (isDeleting)
        {
            <MudButton Color="Color.Error" OnClick="DeletePlaylist">Delete</MudButton>
        }
        else
        {
            if (isEditing)
            {
                <MudButton Color="Color.Primary" OnClick="Save">@("Save")</MudButton>
            }
            else
            {
                <MudButton Color="Color.Primary" OnClick="Save">@("Create")</MudButton>
            }
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public PlaylistDTO Playlist { get; set; } = new PlaylistDTO();

    [Parameter]
    public bool isEditing { get; set; }

    [Parameter]
    public bool isDeleting { get; set; }

    private void Cancel() => MudDialog?.Cancel();
    private async Task Save()
    {
        if (isEditing)
        {
            await PlaylistService.UpdatePlaylistAsync(Playlist); // Update
        }
        else
        {
            await PlaylistService.CreatePlaylistAsync(Playlist); // Create
        }
        MudDialog?.Close(DialogResult.Ok(Playlist.Id)); // Close dialog
    }

    // Delete track
    private async Task DeletePlaylist()
    {
        await PlaylistService.DeletePlaylistAsync(Playlist.Id);
        MudDialog?.Close(DialogResult.Ok(Playlist.Id));
    }
}
