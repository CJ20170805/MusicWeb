@page "/Account/login"
@attribute [AllowAnonymous]
@rendermode InteractiveServer
@using FluentValidation
@using MudBlazor
@using MusicApp.Application.DTOs;
@inject ISnackbar Snackbar
@using MusicApp.Domain.Entities;
@inject NavigationManager NavigationManager
@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject IValidator<LoginDTO> LoginDTOValidator 

<MudGrid class="mt-14"  Spacing="6" Justify="Justify.Center">
    <MudItem>
            <MudCard Style="width:400px;height:240px;">
                <MudText Align="Align.Center" Typo="Typo.h6">Admin Login</MudText>
                <MudForm Model="@loginModel" @ref="@form" ValidationDelay="0">
                    <MudCardContent>
                        <MudTextField @bind-Value="@loginModel.Username" 
                                    For="@(() => loginModel.Username)" 
                                    Immediate="true" 
                                    Label="Username" />
                        
                        <MudTextField @bind-Value="@loginModel.Password" 
                                    For="@(() => loginModel.Password)" 
                                    Immediate="true" 
                                    Label="Password" 
                                    InputType="InputType.Password" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Login</MudButton>
                    </MudCardActions>
                </MudForm>

                @if(!string.IsNullOrEmpty(loginErrorMessage))
                {
                    <MudAlert Severity="MudBlazor.Severity.Error">@loginErrorMessage</MudAlert>
                }
            </MudCard>
    </MudItem>
</MudGrid>

@code {
    private MudForm? form;

    private LoginDTO loginModel = new LoginDTO();
    private string? loginErrorMessage;

    protected override void OnInitialized() // Change to Task
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var ErrMsg = queryParams["ErrMsg"];
        loginErrorMessage = ErrMsg;
    }


    private async Task Submit()
    {
        if (form is null)
        {
            throw new Exception("Form not found");
        }

        var validationResult = await LoginDTOValidator.ValidateAsync(loginModel);

        if (validationResult.IsValid)
        {
            Console.WriteLine("Validation succeeded");
            string queryString = $"Username={loginModel.Username}&Password={loginModel.Password}";

            Console.WriteLine("queryString:::" + queryString);

            NavigationManager.NavigateTo($"/Account/set-cookie?{queryString}", forceLoad: true);
        }
        else
        {
            foreach (var error in validationResult.Errors)
            {
                Snackbar.Add(error.ErrorMessage, MudBlazor.Severity.Error);
            }
            Console.WriteLine("Validation failed");
        }
    }
}