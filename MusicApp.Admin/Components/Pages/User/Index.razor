@page "/users"
@inject IUserService UserService
@inject IDialogService DialogService
@inject IUserRoleService UserRoleService


<PageTitle>User</PageTitle>

<MudTable Items="@users" Hover="true" SortLabel="Sort By">
    <ToolBarContent>
        <MudText Typo="Typo.h6">User Management</MudText>
        <MudSpacer />
        <MudButton class="mr-6" OnClick="handleCreate" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col />
        <col />
        <col />
        <col style="width:18%;" />
    </ColGroup>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel InitialDirection="SortDirection.Ascending"
                SortBy="new Func<UserDTO, object>(x=>x.UserName ?? string.Empty)">UserName</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<UserDTO, object>(x=>x.Email ?? string.Empty)">Email</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<UserDTO, object>(x=>x.IsDeleted)">IsDeleted</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<UserDTO, object>(x=>x.CreatedAt)">CreatedAt</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<UserDTO, object>(x=>x.UpdatedAt)">UpdatedAt</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel
                SortBy="new Func<UserDTO, object>(x=> x.UserRoles?.FirstOrDefault()?.RoleId ?? Guid.Empty)">Roles
            </MudTableSortLabel>
        </MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="UserName">@context.UserName</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="IsDeleted">@context.IsDeleted</MudTd>
        <MudTd DataLabel="CreatedAt">@context.CreatedAt</MudTd>
        <MudTd DataLabel="UpdatedAt">@context.UpdatedAt</MudTd>
        <MudTd DataLabel="Roles">
            @if (context.UserRoles != null && context.UserRoles.Any())
            {
                @foreach (var userRole in context.UserRoles)
                {
                    @if (roleIdToRoleName.TryGetValue(userRole.RoleId, out var roleName))
                    {
                        <span>@roleName</span>

                        <br />
                    }
                    else
                    {
                        <span>Unknown Role</span>

                        <br />
                    }
                }
            }
            else
            {
                <span>No roles</span>
            }
        </MudTd>
        <MudTd>
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="()=> handleEdit(context)">Edit</MudButton>
            <MudButton class="ml-2" Variant="Variant.Outlined" Size="Size.Small" OnClick="()=>handleDelete(context)"
                Color="Color.Secondary">Delete
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<UserDTO>? users;
    private IEnumerable<RoleDTO> RolesList { get; set; } = new List<RoleDTO>();
    private Dictionary<Guid, string> roleIdToRoleName = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        users = await UserService.GetUsersAllAsync();

        var roles = await UserRoleService.GetAllRolesAsync();
        RolesList = roles;
        roleIdToRoleName = roles.ToDictionary(role => role.Id, role => role.Name);

        foreach (var u in users)
        {
            foreach (var ur in u.UserRoles)
            {
                Console.WriteLine("User Role ID: " + ur.RoleId);
                if (roleIdToRoleName.TryGetValue(ur.RoleId, out var roleName))
                {
                    Console.WriteLine("Matched Role Name: " + roleName);
                }
            }
        }
    }

    private async Task handleCreate()
    {
        var parameters = new DialogParameters
        {
            { nameof(UserDialog.User), new UserDTO() },
            { nameof(UserDialog.isEditing), false }
        };

        var dialog = await DialogService.ShowAsync<UserDialog>("Add", parameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task handleEdit(UserDTO user)
    {
        var parameters = new DialogParameters
        {
            { nameof(UserDialog.User), user },
            { nameof(UserDialog.isEditing), true },
            { nameof(UserDialog.RolesList), RolesList}
        };

        var dialog = await DialogService.ShowAsync<UserDialog>("Edit", parameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task handleDelete(UserDTO user)
    {
        var parameters = new DialogParameters
{
{ nameof(UserDialog.User), user },
{ nameof(UserDialog.isEditing), false },
{ nameof(UserDialog.isDeleting), true }
};

        var dialog = await DialogService.ShowAsync<UserDialog>("Delete", parameters);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await LoadData();
        }
    }
}
