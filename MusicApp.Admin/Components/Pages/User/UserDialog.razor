@inject IUserService UserService

<div class="modal fade show" tabindex="-1" role="dialog" style="display: block;">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@((isEditing ? "Edit User" : "Add New User"))</h5>
                <button type="button" class="close" @onclick="() => OnDialogClosed.InvokeAsync()">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label>UserName:</label>
                        <input type="text" class="form-control" @bind="currentUser.UserName" required />
                    </div>
                    <div class="form-group">
                        <label>Email:</label>
                        <input type="text" class="form-control" @bind="currentUser.Email" required />
                    </div>
                    <div class="form-group">
                        <label>IsDeleted:</label>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" disabled @bind="currentUser.IsDeleted" >
                            <label class="form-check-label" for="flexCheckChecked">
                                @(currentUser.IsDeleted? "Deleted": "Normal")
                            </label>
                            </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="() => OnDialogClosed.InvokeAsync()">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveUser">Save</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnUserSaved { get; set; }
    [Parameter] public EventCallback OnDialogClosed { get; set; }
    [Parameter] public UserDTO? User { get; set; } // User for editing

    private UserDTO currentUser = new UserDTO(); // Current user being edited/created
    private bool isEditing = false;

    protected override void OnParametersSet()
    {
        Initialize(User);
    }

    public void Initialize(UserDTO? userToEdit)
    {
        if (userToEdit != null)
        {
            currentUser = userToEdit; // Use the provided user if it's not null
            isEditing = true; // Set editing state
        }
        else
        {
            currentUser = new UserDTO(); // Initialize a new UserDTO if null
            isEditing = false; // Reset editing state
        }
    }

    private async Task SaveUser()
    {
        if (isEditing)
        {
            await UserService.UpdateUserSAsync(currentUser);
        }
        else
        {
            //await UserService.CreateUserSAsync(currentUser);
        }

        await OnUserSaved.InvokeAsync();
        await OnDialogClosed.InvokeAsync();
    }
}
