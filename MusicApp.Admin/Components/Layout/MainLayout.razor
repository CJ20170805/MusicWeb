@inherits LayoutComponentBase
@using MusicApp.Admin.Services
@using MusicApp.Domain.Entities
@using Microsoft.AspNetCore.SignalR.Client;
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject ThemeService ThemeService
@inject INotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudThemeProvider Theme="@_theme" IsDarkMode="@ThemeService.IsDarkMode" />
<MudPopoverProvider />
<MudDialogProvider FullWidth="true" MaxWidth="MaxWidth.Small" />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
            OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Admin</MudText>
        <MudSpacer />
        <MudBadge Content="@unreadCount" Overlap="true" Style="cursor: pointer;" OnClick="@ToggleOpen"
            Class="mx-6 my-4">
            <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Default" />

            <MudPopover Style="width:330px" Open="_open" OverflowBehavior="OverflowBehavior.FlipAlways"
                AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter" Paper="false">
                <MudPaper Outlined="true">
                    <MudPaper Class="pa-2 d-flex justify-space-between flex-grow-1 gap-6" Elevation="0">
                        <MudPaper Class="d-flex align-center justify-start mud-width-full">
                            <MudText Typo="Typo.subtitle1">Notifications</MudText>
                        </MudPaper>
                        <MudPaper Class="pa-2 d-flex align-center justify-end mud-width-full">
                            <MudButton StartIcon="@Icons.Material.Outlined.DoneAll" Variant="Variant.Text"
                                Color="Color.Primary" Size="Size.Small" OnClick="HandleMarkAsRead">Mark as read
                            </MudButton>
                        </MudPaper>
                    </MudPaper>
                    <MudDivider />
                    <MudList T="string" Class="pa-2">



                        @if (notifications != null && notifications.Any())
                        {
                            @foreach (var notification in notifications)
                            {
                                <MudListItem Class="pa-1">
                                    <MudText Typo="Typo.body2">@notification.Message</MudText>
                                    <MudText Typo="Typo.caption" Class="text-muted">
                                        @notification.CreatedAt.ToLocalTime().ToString("g")
                                    </MudText>
                                </MudListItem>
                            }
                        }
                        else
                        {
                            <MudListItem>
                                <MudText Typo="Typo.body1">No notifications available</MudText>
                            </MudListItem>
                        }
                    </MudList>
                </MudPaper>
            </MudPopover>
        </MudBadge>
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@ToggleDarkMode" />
        <MudMenu Icon="@Icons.Material.Filled.MoreVert" AriaLabel="Open user menu">
            <MudMenuItem>Profile</MudMenuItem>
            <MudMenuItem>My account</MudMenuItem>
            <MudMenuItem OnClick="HandleLogout">Logout</MudMenuItem>
        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent MaxWidth="MaxWidth.Medium" Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _open = false;
    private void ToggleOpen() => _open = !_open;
    private bool _drawerOpen = true;
    private MudTheme? _theme = null;
    private IEnumerable<Notification> notifications = new List<Notification>();
    private HubConnection? hubConnection;
    private bool _isListening = false;
    private int unreadCount = 0;
    private Guid currentUserId;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _theme = new()
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };

        ThemeService.OnChange += async () => await InvokeAsync(StateHasChanged);

        Console.WriteLine("Initialing~~~~~~");

        _ = Task.Run(async () =>
        {
            await Task.Delay(1000); // Delay before fetching notifications
            await GetNotificationAsnyc();
            await InvokeAsync(StateHasChanged); // Ensure UI is updated after fetching notifications
            await ListenNotification();
        });
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public async Task ListenNotification()
    {
        if (!_isListening)
        {
            Console.WriteLine("Strat ListenNoTi");

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;


            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                _isListening = true;

                try
                {
                    hubConnection = new HubConnectionBuilder()
                    .WithUrl(NavigationManager.ToAbsoluteUri("/NotificationHub"), options =>
                    {
                        var httpContext = HttpContextAccessor.HttpContext;
                        if (httpContext != null)
                        {
                            var container = new System.Net.CookieContainer();
                            foreach (var item in httpContext.Request.Cookies)
                            {
                                container.Add(new System.Net.Cookie(item.Key, item.Value)
                                    {
                                        Domain = httpContext.Request.Host.Host,
                                        HttpOnly = true
                                    });
                            }
                            options.Cookies = container;
                        }
                        else
                        {
                            Console.WriteLine("HttpContext is null.");
                        }

                    })
                    .WithAutomaticReconnect()
                    .Build();

                    hubConnection.On<string>("ReceiveNotification", async (message) =>
                    {
                        Console.WriteLine("MSGGGG" + message);
                        await GetNotificationAsnyc();
                    });

                    await hubConnection.StartAsync();

                    // After starting the connection, you can retrieve the ConnectionId
                    var connectionId = hubConnection.ConnectionId;
                    Console.WriteLine($"Connection established with ID: {connectionId}");
                }
                catch (Exception err)
                {
                    Console.WriteLine("HubErr" + err);
                }
            }
        }
    }

    private async Task GetNotificationAsnyc()
    {
        var httpContext = HttpContextAccessor.HttpContext;

        if (httpContext != null)
        {
            // Get the current user's ID
            var user = await UserManager.GetUserAsync(httpContext.User);
            if (user != null)
            {
                Console.WriteLine("Currrent User:" + user.Id);
                 currentUserId = user.Id;
                // Fetch notifications for the current user
                bool isAdmin = await UserManager.IsInRoleAsync(user, "Admin");

                try
                {
                    notifications = await NotificationService.GetNotificationsByUserIdAsync(user.Id);
                    foreach (var n in notifications)
                    {
                        Console.WriteLine("notification------>>" + n.Message);
                    }
                    await InvokeAsync(() =>
                    {
                        unreadCount = notifications.Count();
                        StateHasChanged();
                    });
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error fetching notifications: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine("Http Null");
            }
        }
    }

    private async Task HandleMarkAsRead()
    {
        var unreadList = notifications
                            .Select(n => n.Id.ToString())
                            .ToList();
        if (unreadList.Any())
        {
            try
            {
                await NotificationService.MarkNotificationAsReadAsync(currentUserId, unreadList);

                // Refresh the notifications to reflect changes
                await GetNotificationAsnyc();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error marking notifications as read: {ex.Message}");
            }
        }
    }
    private void ToggleDarkMode() => ThemeService.ToggleDarkMode();

    private void HandleLogout()
    {
        // Redirect to the login page or home page
        NavigationManager.NavigateTo("/Account/logout", forceLoad: true);
    }


    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }


    private readonly PaletteLight _lightPalette = new()
        {
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
        };

    private readonly PaletteDark _darkPalette = new()
        {
            Primary = "#7e6fff",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            AppbarText = "#92929f",
            AppbarBackground = "rgba(26,26,39,0.8)",
            DrawerBackground = "#1a1a27",
            ActionDefault = "#74718e",
            ActionDisabled = "#9999994d",
            ActionDisabledBackground = "#605f6d4d",
            TextPrimary = "#b2b0bf",
            TextSecondary = "#92929f",
            TextDisabled = "#ffffff33",
            DrawerIcon = "#92929f",
            DrawerText = "#92929f",
            GrayLight = "#2a2833",
            GrayLighter = "#1e1e2d",
            Info = "#4a86ff",
            Success = "#3dcb6c",
        };

    public string DarkLightModeButtonIcon => ThemeService.IsDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}
